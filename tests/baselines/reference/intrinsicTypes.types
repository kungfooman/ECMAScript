//// [tests/cases/conformance/types/typeAliases/intrinsicTypes.ts] ////

=== intrinsicTypes.ts ===
type TU1 = Uppercase<'hello'>;  // "HELLO"
>TU1 : "HELLO"
>    : ^^^^^^^

type TU2 = Uppercase<'foo' | 'bar'>;  // "FOO" | "BAR"
>TU2 : "FOO" | "BAR"
>    : ^^^^^^^^^^^^^

type TU3 = Uppercase<string>;  // Uppercase<string>
>TU3 : Uppercase<string>
>    : ^^^^^^^^^^^^^^^^^

type TU4 = Uppercase<any>;  // Uppercase<`${any}`>
>TU4 : Uppercase<any>
>    : ^^^^^^^^^^^^^^

type TU5 = Uppercase<never>;  // never
>TU5 : never
>    : ^^^^^

type TU6 = Uppercase<42>;  // Error
>TU6 : 42
>    : ^^

type TL1 = Lowercase<'HELLO'>;  // "hello"
>TL1 : "hello"
>    : ^^^^^^^

type TL2 = Lowercase<'FOO' | 'BAR'>;  // "foo" | "bar"
>TL2 : "foo" | "bar"
>    : ^^^^^^^^^^^^^

type TL3 = Lowercase<string>;  // Lowercase<string>
>TL3 : Lowercase<string>
>    : ^^^^^^^^^^^^^^^^^

type TL4 = Lowercase<any>;  // Lowercase<`${any}`>
>TL4 : Lowercase<any>
>    : ^^^^^^^^^^^^^^

type TL5 = Lowercase<never>;  // never
>TL5 : never
>    : ^^^^^

type TL6 = Lowercase<42>;  // Error
>TL6 : 42
>    : ^^

type TC1 = Capitalize<'hello'>;  // "Hello"
>TC1 : "Hello"
>    : ^^^^^^^

type TC2 = Capitalize<'foo' | 'bar'>;  // "Foo" | "Bar"
>TC2 : "Foo" | "Bar"
>    : ^^^^^^^^^^^^^

type TC3 = Capitalize<string>;  // Capitalize<string>
>TC3 : Capitalize<string>
>    : ^^^^^^^^^^^^^^^^^^

type TC4 = Capitalize<any>;  // Capitalize<`${any}`>
>TC4 : Capitalize<any>
>    : ^^^^^^^^^^^^^^^

type TC5 = Capitalize<never>;  // never
>TC5 : never
>    : ^^^^^

type TC6 = Capitalize<42>;  // Error
>TC6 : 42
>    : ^^

type TN1 = Uncapitalize<'Hello'>;  // "hello"
>TN1 : "hello"
>    : ^^^^^^^

type TN2 = Uncapitalize<'Foo' | 'Bar'>;  // "foo" | "bar"
>TN2 : "foo" | "bar"
>    : ^^^^^^^^^^^^^

type TN3 = Uncapitalize<string>;  // Uncapitalize<string>
>TN3 : Uncapitalize<string>
>    : ^^^^^^^^^^^^^^^^^^^^

type TN4 = Uncapitalize<any>;  // Uncapitalize<`${any}`>
>TN4 : Uncapitalize<any>
>    : ^^^^^^^^^^^^^^^^^

type TN5 = Uncapitalize<never>;  // never
>TN5 : never
>    : ^^^^^

type TN6 = Uncapitalize<42>;  // Error
>TN6 : 42
>    : ^^

type TX1<S extends string> = Uppercase<`aB${S}`>;
>TX1 : `AB${Uppercase<S>}`
>    : ^^^^^^^^^^^^^^^^^^^

type TX2 = TX1<'xYz'>;  // "ABXYZ"
>TX2 : "ABXYZ"
>    : ^^^^^^^

type TX3<S extends string> = Lowercase<`aB${S}`>;
>TX3 : `ab${Lowercase<S>}`
>    : ^^^^^^^^^^^^^^^^^^^

type TX4 = TX3<'xYz'>;  // "abxyz"
>TX4 : "abxyz"
>    : ^^^^^^^

type TX5 = `${Uppercase<'abc'>}${Lowercase<'XYZ'>}`;  // "ABCxyz"
>TX5 : "ABCxyz"
>    : ^^^^^^^^

type MyUppercase<S extends string> = intrinsic;  // Error
>MyUppercase : intrinsic
>            : ^^^^^^^^^

function foo1<T extends string, U extends T>(s: string, x: Uppercase<T>, y: Uppercase<U>) {
>foo1 : <T extends string, U extends T>(s: string, x: Uppercase<T>, y: Uppercase<U>) => void
>     : ^ ^^^^^^^^^      ^^ ^^^^^^^^^ ^^ ^^      ^^ ^^            ^^ ^^            ^^^^^^^^^
>s : string
>  : ^^^^^^
>x : Uppercase<T>
>  : ^^^^^^^^^^^^
>y : Uppercase<U>
>  : ^^^^^^^^^^^^

    s = x;
>s = x : Uppercase<T>
>      : ^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>x : Uppercase<T>
>  : ^^^^^^^^^^^^

    s = y;
>s = y : Uppercase<U>
>      : ^^^^^^^^^^^^
>s : string
>  : ^^^^^^
>y : Uppercase<U>
>  : ^^^^^^^^^^^^

    x = s;  // Error
>x = s : string
>      : ^^^^^^
>x : Uppercase<T>
>  : ^^^^^^^^^^^^
>s : string
>  : ^^^^^^

    x = y;
>x = y : Uppercase<U>
>      : ^^^^^^^^^^^^
>x : Uppercase<T>
>  : ^^^^^^^^^^^^
>y : Uppercase<U>
>  : ^^^^^^^^^^^^

    y = s;  // Error
>y = s : string
>      : ^^^^^^
>y : Uppercase<U>
>  : ^^^^^^^^^^^^
>s : string
>  : ^^^^^^

    y = x;  // Error
>y = x : Uppercase<T>
>      : ^^^^^^^^^^^^
>y : Uppercase<U>
>  : ^^^^^^^^^^^^
>x : Uppercase<T>
>  : ^^^^^^^^^^^^
}

function foo2<T extends 'foo' | 'bar'>(x: Uppercase<T>) {
>foo2 : <T extends "foo" | "bar">(x: Uppercase<T>) => void
>     : ^ ^^^^^^^^^             ^^ ^^            ^^^^^^^^^
>x : Uppercase<T>
>  : ^^^^^^^^^^^^

    let s: 'FOO' | 'BAR' = x;
>s : "FOO" | "BAR"
>  : ^^^^^^^^^^^^^
>x : "FOO" | "BAR"
>  : ^^^^^^^^^^^^^
}

declare function foo3<T extends string>(x: Uppercase<T>): T;
>foo3 : <T extends string>(x: Uppercase<T>) => T
>     : ^ ^^^^^^^^^      ^^ ^^            ^^^^^ 
>x : Uppercase<T>
>  : ^^^^^^^^^^^^

function foo4<U extends string>(x: Uppercase<U>) {
>foo4 : <U extends string>(x: Uppercase<U>) => U
>     : ^ ^^^^^^^^^      ^^ ^^            ^^^^^^
>x : Uppercase<U>
>  : ^^^^^^^^^^^^

    return foo3(x);
>foo3(x) : U
>        : ^
>foo3 : <T extends string>(x: Uppercase<T>) => T
>     : ^ ^^^^^^^^^      ^^ ^^            ^^^^^^
>x : Uppercase<U>
>  : ^^^^^^^^^^^^
}

type TI1 = Integer<3.5>;  // 3
>TI1 : 3

type TI2 = Integer<2.5 | 3.4>;  // 2 | 3
>TI2 : 3 | 2

type TI3 = Integer<number>;  // number
>TI3 : number

type TI4 = Integer<any>;  // any
>TI4 : any

type TI5 = Integer<never>;  // never
>TI5 : never

type TI6 = Integer<'42'>;  // Error
>TI6 : "42"

type TA1 = Add<4, 2>;  // 6
>TA1 : 6

type TA2L = Add<4 | 5, 2>;  // 6 | 7
>TA2L : 6 | 7

type TA2R = Add<4, 2 | 3>;  // 6 | 7
>TA2R : 6 | 7

type TA2LR = Add<4 | 5, 2 | 3>;  // 6 | 7 | 8
>TA2LR : 6 | 7 | 8

type TA3L = Add<number, 2>;  // number
>TA3L : number

type TA3R = Add<4, number>;  // number
>TA3R : number

type TA3LR = Add<number, number>;  // number
>TA3LR : number

type TA4L = Add<any, 2>;  // any
>TA4L : any

type TA4R = Add<4, any>;  // any
>TA4R : any

type TA4LR = Add<any, any>;  // any
>TA4LR : any

type TA5L = Add<never, 2>;  // never
>TA5L : never

type TA5R = Add<4, never>;  // never
>TA5R : never

type TA5LR = Add<never, never>;  // never
>TA5LR : never

type TA6L = Add<'4', 2>;  // Error
>TA6L : "4"

type TA6R = Add<4, '2'>;  // Error
>TA6R : "2"

type TA6LR = Add<'4', '2'>;  // Error
>TA6LR : "4"

type TS1 = Subtract<4, 2>;  // 2
>TS1 : 2

type TS2L = Subtract<4 | 5, 2>;  // 2 | 3
>TS2L : 3 | 2

type TS2R = Subtract<4, 2 | 3>;  // 2 | 1
>TS2R : 2 | 1

type TS2LR = Subtract<4 | 5, 2 | 3>;  // 2 | 1 | 3
>TS2LR : 3 | 2 | 1

type TS3L = Subtract<number, 2>;  // number
>TS3L : number

type TS3R = Subtract<4, number>;  // number
>TS3R : number

type TS3LR = Subtract<number, number>;  // number
>TS3LR : number

type TS4L = Subtract<any, 2>;  // any
>TS4L : any

type TS4R = Subtract<4, any>;  // any
>TS4R : any

type TS4LR = Subtract<any, any>;  // any
>TS4LR : any

type TS5L = Subtract<never, 2>;  // never
>TS5L : never

type TS5R = Subtract<4, never>;  // never
>TS5R : never

type TS5LR = Subtract<never, never>;  // never
>TS5LR : never

type TS6L = Subtract<'4', 2>;  // Error
>TS6L : "4"

type TS6R = Subtract<4, '2'>;  // Error
>TS6R : "2"

type TS6LR = Subtract<'4', '2'>;  // Error
>TS6LR : "4"

type TM1 = Multiply<4, 2>;  // 8
>TM1 : 8

type TM2L = Multiply<4 | 5, 2>;  // 8 | 10
>TM2L : 8 | 10

type TM2R = Multiply<4, 2 | 3>;  // 8 | 12
>TM2R : 8 | 12

type TM2LR = Multiply<4 | 5, 2 | 3>;  // 8 | 12 | 10 | 15
>TM2LR : 8 | 10 | 12 | 15

type TM3L = Multiply<number, 2>;  // number
>TM3L : number

type TM3R = Multiply<4, number>;  // number
>TM3R : number

type TM3LR = Multiply<number, number>;  // number
>TM3LR : number

type TM4L = Multiply<any, 2>;  // any
>TM4L : any

type TM4R = Multiply<4, any>;  // any
>TM4R : any

type TM4LR = Multiply<any, any>;  // any
>TM4LR : any

type TM5L = Multiply<never, 2>;  // never
>TM5L : never

type TM5R = Multiply<4, never>;  // never
>TM5R : never

type TM5LR = Multiply<never, never>;  // never
>TM5LR : never

type TM6L = Multiply<'4', 2>;  // Error
>TM6L : "4"

type TM6R = Multiply<4, '2'>;  // Error
>TM6R : "2"

type TM6LR = Multiply<'4', '2'>;  // Error
>TM6LR : "4"

type TD1 = Divide<4, 2>;  // 2
>TD1 : 2

type TD2L = Divide<4 | 5, 2>;  // 2 | 2.5
>TD2L : 2.5 | 2

type TD2R = Divide<4, 2 | 4>;  // 2 | 1
>TD2R : 2 | 1

type TD2LR = Divide<4 | 5, 2 | 4>;  // 2 | 1 | 2.5 | 1.25
>TD2LR : 2.5 | 2 | 1 | 1.25

type TD3L = Divide<number, 2>;  // number
>TD3L : number

type TD3R = Divide<4, number>;  // number
>TD3R : number

type TD3LR = Divide<number, number>;  // number
>TD3LR : number

type TD4L = Divide<any, 2>;  // any
>TD4L : any

type TD4R = Divide<4, any>;  // any
>TD4R : any

type TD4LR = Divide<any, any>;  // any
>TD4LR : any

type TD5L = Divide<never, 2>;  // never
>TD5L : never

type TD5R = Divide<4, never>;  // never
>TD5R : never

type TD5LR = Divide<never, never>;  // never
>TD5LR : never

type TD6L = Divide<'4', 2>;  // Error
>TD6L : "4"

type TD6R = Divide<4, '2'>;  // Error
>TD6R : "2"

type TD6LR = Divide<'4', '2'>;  // Error
>TD6LR : "4"

type TD7 = Divide<1, 0>; // never
>TD7 : never

type TIX1<S extends number> = Integer<S>;
>TIX1 : Integer<S>

type TIX2 = TIX1<4.2>;  // 4
>TIX2 : 4

type TAX1<M extends number, N extends number> = Add<M, N>;
>TAX1 : Add<M, N>

type TAX2 = TAX1<4, 2>;  // 6
>TAX2 : 6

type TSX1<M extends number, N extends number> = Subtract<M, N>;
>TSX1 : Subtract<M, N>

type TSX2 = TSX1<4, 2>;  // 6
>TSX2 : 2

type TMX1<M extends number, N extends number> = Multiply<M, N>;
>TMX1 : Multiply<M, N>

type TMX2 = TMX1<4, 2>;  // 8
>TMX2 : 8

type TDX1<M extends number, N extends number> = Divide<M, N>;
>TDX1 : Divide<M, N>

type TDX2 = TDX1<4, 2>;  // 2
>TDX2 : 2

type TAMX = Add<2, Multiply<5, 8>>  // 42
>TAMX : 42

function foo5<T extends number, U extends T>(s: number, x: Add<T, U>, y: Multiply<T, U>) {
>foo5 : <T extends number, U extends T>(s: number, x: Add<T, U>, y: Multiply<T, U>) => void
>s : number
>x : Add<T, U>
>y : Multiply<T, U>

    s = x;
>s = x : Add<T, U>
>s : number
>x : Add<T, U>

    s = y;
>s = y : Multiply<T, U>
>s : number
>y : Multiply<T, U>

    x = s;  // Error
>x = s : number
>x : Add<T, U>
>s : number

    x = y;  // Error
>x = y : Multiply<T, U>
>x : Add<T, U>
>y : Multiply<T, U>

    y = s;  // Error
>y = s : number
>y : Multiply<T, U>
>s : number

    y = x;  // Error
>y = x : Add<T, U>
>y : Multiply<T, U>
>x : Add<T, U>
}

function foo6<T extends 0 | 1>(x: Add<T, 3>) {
>foo6 : <T extends 0 | 1>(x: Add<T, 3>) => void
>x : Add<T, 3>

    let s: 3 | 4 = x;
>s : 3 | 4
>x : 3 | 4
}

declare function foo7<T extends number>(x: Integer<T>): T;
>foo7 : <T extends number>(x: Integer<T>) => T
>x : Integer<T>

function foo8<U extends number>(x: Integer<U>) {
>foo8 : <U extends number>(x: Integer<U>) => U
>x : Integer<U>

    return foo7(x);
>foo7(x) : U
>foo7 : <T extends number>(x: Integer<T>) => T
>x : Integer<U>
}

